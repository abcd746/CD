Nano ifelse_syntax.l-
%{
#include "ifelse_syntax.tab.h"
#include <string.h>
#include <stdlib.h>

#ifndef strdup
char *strdup(const char *s) {
    char *d = malloc(strlen(s) + 1);
    if (d == NULL) return NULL;
    strcpy(d, s);
    return d;
}
#endif
%}

%%

"if"         { return IF; }
"else"       { return ELSE; }
"("          { return LPAREN; }
")"          { return RPAREN; }
"{"          { return LBRACE; }
"}"          { return RBRACE; }
"=="         { return EQ; }
"<"          { return LT; }
">"          { return GT; }
"="          { return ASSIGN; }
"+"          { return PLUS; }
"-"          { return MINUS; }
"*"          { return MUL; }
"/"          { return DIV; }
";"          { return SEMICOLON; }
[0-9]+       { yylval.str = strdup(yytext); return NUMBER; }
[a-zA-Z_][a-zA-Z0-9_]* { yylval.str = strdup(yytext); return ID; }
[ \t\n]+     { /* skip whitespace */ }
.            { return yytext[0]; }

%%

int yywrap() { return 1; }


Nano ifelse_syntax.y-
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void yyerror(const char *s);
int yylex();
void print_indent(int level);
extern FILE *yyin;
int indent = 0;
%}

%union {
    char* str;
}

%token <str> ID NUMBER
%token IF ELSE LPAREN RPAREN LBRACE RBRACE EQ LT GT PLUS MINUS MUL DIV SEMICOLON ASSIGN

%type <str> expr condition

%left PLUS MINUS
%left MUL DIV
%left LT GT EQ

%%

program:
    if_else_stmt
    ;

if_else_stmt:
    IF LPAREN condition RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE {
        print_indent(indent); printf("|-- if_else_stmt\n"); indent++;
        print_indent(indent); printf("|-- IF\n");
        print_indent(indent); printf("|-- condition\n");
        indent++;  /* subcondition already printed in condition rule */ indent--;
        print_indent(indent); printf("|-- stmt_list (if-block)\n");
        indent++;  /* if block handled in stmt_list rule */ indent--;
        print_indent(indent); printf("|-- ELSE\n");
        print_indent(indent); printf("|-- stmt_list (else-block)\n");
        indent++;  /* else block handled in stmt_list rule */ indent--;
        indent--;
    }
    ;

condition:
    expr LT expr {
        print_indent(indent); printf("|-- condition\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- LT\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | expr GT expr {
        print_indent(indent); printf("|-- condition\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- GT\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | expr EQ expr {
        print_indent(indent); printf("|-- condition\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- EQ\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    ;

stmt_list:
    stmt {
        print_indent(indent); printf("|-- stmt_list\n"); indent++;
        print_indent(indent); printf("|-- stmt\n"); indent--;
    }
    | stmt_list stmt {
        print_indent(indent); printf("|-- stmt_list\n"); indent++;
        print_indent(indent); printf("|-- stmt\n"); indent--;
    }
    ;

stmt:
    ID ASSIGN expr SEMICOLON {
        print_indent(indent); printf("|-- stmt\n"); indent++;
        print_indent(indent); printf("|-- ID: %s\n", $1);
        print_indent(indent); printf("|-- ASSIGN\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- SEMICOLON\n");
        indent--;
    }
    ;

expr:
    expr PLUS expr {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- PLUS\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | expr MINUS expr {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- MINUS\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | expr MUL expr {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- MUL\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | expr DIV expr {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        print_indent(indent); printf("|-- DIV\n");
        print_indent(indent); printf("|-- expr\n"); indent++; indent--;
        indent--;
    }
    | ID {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- ID: %s\n", $1); indent--;
    }
    | NUMBER {
        print_indent(indent); printf("|-- expr\n"); indent++;
        print_indent(indent); printf("|-- NUMBER: %s\n", $1); indent--;
    }
    ;

%%

void yyerror(const char *s) {
    printf("Error: %s\n", s);
}

void print_indent(int level) {
    for (int i = 0; i < level; i++) printf("    ");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <input_file>\n", argv[0]);
        return 1;
    }
    FILE *input_file = fopen(argv[1], "r");
    if (!input_file) {
        perror("Error opening input file");
        return 1;
    }
    yyin = input_file;
    yyparse();
    fclose(input_file);
    return 0;
}


Nano input_ifelse.txt-
if (x < 10) {
    x = x + 1;
} else {
    x = 0;
}

bison -d ifelse_syntax.y
flex ifelse_syntax.l
gcc ifelse_syntax.tab.c lex.yy.c -o ifelse -lfl
./ifelse input_ifelse.txt
